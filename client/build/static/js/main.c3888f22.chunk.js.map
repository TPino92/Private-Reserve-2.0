{"version":3,"sources":["assets/spinner.gif","utils/reducers.js","utils/actions.js","utils/store.js","utils/helpers.js","components/ProductItem/index.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","components/ReviewList/index.js","utils/mutations.js","components/ReviewForm/index.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/Success.js","pages/OrderHistory.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","products","cart","cartOpen","categories","currentCategory","reducer","state","action","type","product","newState","filter","_id","length","map","purchaseQuantity","store","createStore","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","oncomplete","close","ProductItem","item","useSelector","dispatch","useDispatch","image","name","price","quantity","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","parseInt","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","QUERY_CHECKOUT","ProductList","useQuery","loading","data","useEffect","forEach","then","category","key","spinner","CategoryMenu","categoryData","id","CartItem","placeholder","value","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","a","getCart","res","redirectToCheckout","sessionId","checkout","session","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","ReviewList","reviews","review","firstName","reviewBody","LOGIN","ADD_ORDER","ADD_USER","ADD_REVIEW","ReviewForm","productId","useState","setBody","characterCount","setCharacterCount","useMutation","addReview","error","handleFormSubmit","event","preventDefault","onSubmit","reload","Detail","useParams","currentProduct","setCurrentProduct","indexedProducts","disabled","p","description","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","Login","props","email","password","formState","setFormState","login","mutationResponse","handleChange","htmlFor","Signup","addUser","lastName","Nav","href","logout","Success","addOrder","saveOrder","setTimeout","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","client","ApolloClient","operation","setContext","headers","authorization","uri","App","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c3888f22.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","// import { useReducer } from 'react';\r\n\r\nimport {\r\n    UPDATE_PRODUCTS,\r\n    UPDATE_CATEGORIES,\r\n    UPDATE_CURRENT_CATEGORY,\r\n    ADD_TO_CART,\r\n    ADD_MULTIPLE_TO_CART,\r\n    REMOVE_FROM_CART,\r\n    UPDATE_CART_QUANTITY,\r\n    CLEAR_CART,\r\n    TOGGLE_CART\r\n  } from './actions';\r\n\r\nconst initialState = {\r\n    products: [],\r\n    cart: [],\r\n    cartOpen: false,\r\n    categories: [],\r\n    currentCategory: '',\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\nswitch (action.type) {\r\n    // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\r\n    case UPDATE_PRODUCTS:\r\n    return {\r\n        ...state,\r\n        products: [...action.products]\r\n    };\r\n    // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\r\n    case UPDATE_CATEGORIES:\r\n    return {\r\n        ...state,\r\n        categories: [...action.categories]\r\n    };\r\n    case UPDATE_CURRENT_CATEGORY:\r\n    return {\r\n        ...state,\r\n        currentCategory: action.currentCategory\r\n    };\r\n    case ADD_TO_CART:\r\n    return {\r\n        ...state,\r\n        cartOpen: true,\r\n        cart: [...state.cart, action.product]\r\n    };\r\n    case ADD_MULTIPLE_TO_CART:\r\n    return {\r\n        ...state,\r\n        cart: [...state.cart, ...action.products],\r\n    };\r\n    case REMOVE_FROM_CART:\r\n        let newState = state.cart.filter(product => {\r\n            return product._id !== action._id;\r\n        });\r\n\r\n        return {\r\n            ...state,\r\n            cartOpen: newState.length > 0,\r\n            cart: newState\r\n        };\r\n    case UPDATE_CART_QUANTITY:\r\n    return {\r\n        ...state,\r\n        cartOpen: true,\r\n        cart: state.cart.map(product => {\r\n        if (action._id === product._id) {\r\n            product.purchaseQuantity = action.purchaseQuantity;\r\n        }\r\n        return product;\r\n        })\r\n    };\r\n    case CLEAR_CART:\r\n    return {\r\n        ...state,\r\n        cartOpen: false,\r\n        cart: []\r\n    };\r\n    case TOGGLE_CART:\r\n    return {\r\n        ...state,\r\n        cartOpen: !state.cartOpen\r\n    };\r\n\r\n    default:\r\n    return state;\r\n}\r\n};\r\n\r\nexport default reducer; ","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\r\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\r\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\r\nexport const ADD_TO_CART = 'ADD_TO_CART';\r\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\r\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\r\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\r\nexport const CLEAR_CART = 'CLEAR_CART';\r\nexport const TOGGLE_CART = 'TOGGLE_CART';\r\nexport const ADD_REVIEW = 'ADD_REVIEW'\r\n\r\n","import { createStore } from 'redux';\r\nimport reducer from './reducers';\r\n\r\nconst store = createStore(reducer);\r\nexport default store; ","export function pluralize(name, count) {\r\n  if (count === 1) {\r\n    return name\r\n  }\r\n  return name + 's'\r\n}\r\n\r\nexport function idbPromise(storeName, method, object) {\r\n  return new Promise((resolve, reject) => {\r\n    // open connection to the database `shop-shop` with the version of 1\r\n    const request = window.indexedDB.open('shop-shop', 1);\r\n\r\n    // create variables to hold reference to the database, transaction (tx), and object store\r\n    let db, tx, store;\r\n\r\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores \r\n    request.onupgradeneeded = function(e) {\r\n      const db = request.result;\r\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\r\n      db.createObjectStore('products', { keyPath: '_id' });\r\n      db.createObjectStore('categories', { keyPath: '_id' });\r\n      db.createObjectStore('cart', { keyPath: '_id' });\r\n//      db.createObjectStore('review', { keyPath: '_id' });\r\n    };\r\n\r\n    // handle any errors with connecting\r\n    request.onerror = function(e) {\r\n      console.log('There was an error');\r\n    };\r\n\r\n    // on database open success\r\n    request.onsuccess = function(e) {\r\n      // save a reference of the database to the `db` variable\r\n      db = request.result;\r\n      // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\r\n      tx = db.transaction(storeName, 'readwrite');\r\n      // save a reference to that object store\r\n      store = tx.objectStore(storeName);\r\n\r\n      // if there's any errors, let us know\r\n      db.onerror = function(e) {\r\n        console.log('error', e);\r\n      };\r\n\r\n      switch (method) {\r\n        case 'put':\r\n          store.put(object);\r\n          resolve(object);\r\n          break;\r\n        case 'get':\r\n          const all = store.getAll();\r\n          all.onsuccess = function() {\r\n            resolve(all.result);\r\n          };\r\n          break;\r\n        case 'delete':\r\n          store.delete(object._id);\r\n          break;\r\n        default:\r\n          console.log('No valid method');\r\n          break;\r\n      }\r\n      \r\n      // when the transaction is complete, close the connection\r\n      tx.oncomplete = function() {\r\n        db.close();\r\n      };\r\n    };\r\n\r\n  });\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { pluralize } from \"../../utils/helpers\";\r\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\r\nimport { idbPromise } from \"../../utils/helpers\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nfunction ProductItem(item) {\r\n\r\n  const state = useSelector(state => state);\r\n  const dispatch = useDispatch();\r\n  const { cart } = state;\r\n\r\n  const {\r\n    image,\r\n    name,\r\n    _id,\r\n    price,\r\n    quantity\r\n  } = item;\r\n\r\n\r\n  const addToCart = () => {\r\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id)\r\n    if (itemInCart) {\r\n      dispatch({\r\n        type: UPDATE_CART_QUANTITY,\r\n        _id: _id,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\r\n      });\r\n      idbPromise('cart', 'put', {\r\n        ...itemInCart,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: ADD_TO_CART,\r\n        product: { ...item, purchaseQuantity: 1 }\r\n      });\r\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\r\n    }\r\n  }\r\n\r\n  \r\n  return (\r\n    <div className=\"card px-1 py-1\">\r\n      <Link to={`/products/${_id}`}>\r\n        <img className=\"imgCard\"\r\n          alt={name}\r\n          src={`/images/${image}`}\r\n        />\r\n        <p className=\"prodName\">{name}</p>\r\n      </Link>\r\n      <div>\r\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\r\n        <span>${price}</span>\r\n      </div>\r\n      <button className=\"btnStash\" onClick={addToCart}>Add to Stash</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductItem;\r\n","import gql from 'graphql-tag';\r\n\r\nexport const QUERY_PRODUCTS = gql`\r\n  query getProducts($category: ID) {\r\n    products(category: $category) {\r\n      _id\r\n      name\r\n      description\r\n      price\r\n      quantity\r\n      image\r\n      category {\r\n        _id\r\n      }\r\n      reviews {\r\n        _id\r\n        reviewBody\r\n        firstName\r\n      } \r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_ALL_PRODUCTS = gql`\r\n  {\r\n    products {\r\n      _id\r\n      name\r\n      description\r\n      price\r\n      quantity\r\n      category {\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_CATEGORIES = gql`\r\n{\r\n  categories {\r\n    _id\r\n    name\r\n  }\r\n}\r\n`;\r\n\r\nexport const QUERY_USER = gql`\r\n{\r\n  user {\r\n    firstName\r\n    lastName\r\n    orders {\r\n      _id\r\n      purchaseDate\r\n      products {\r\n        _id\r\n        name\r\n        description\r\n        price\r\n        quantity\r\n        image\r\n      }\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport const QUERY_CHECKOUT = gql`\r\n  query getCheckout($products: [ID]!) {\r\n    checkout(products: $products) {\r\n      session\r\n    }\r\n  }\r\n`;","import React, { useEffect } from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport ProductItem from \"../ProductItem\";\r\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\r\nimport spinner from \"../../assets/spinner.gif\"\r\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\r\nimport { idbPromise } from \"../../utils/helpers\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\n\r\nfunction ProductList() {\r\n\r\n  const state = useSelector(state => state);\r\n  const dispatch = useDispatch();\r\n  const { currentCategory } = state;\r\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\r\n\r\n\r\n  useEffect(() => {\r\n    if(data) {\r\n      dispatch({\r\n        type: UPDATE_PRODUCTS,\r\n        products: data.products\r\n      });\r\n  \r\n      data.products.forEach((product) => {\r\n        idbPromise('products', 'put', product);\r\n      });\r\n      // add else if to check if `loading` is undefined in `useQuery()` Hook\r\n    } else if (!loading) {\r\n      // since we're offline, get all of the data from the `products` store\r\n      idbPromise('products', 'get').then((products) => {\r\n        // use retrieved data to set global state for offline browsing\r\n        dispatch({\r\n          type: UPDATE_PRODUCTS,\r\n          products: products\r\n        });\r\n      });\r\n    }\r\n  }, [data, loading, dispatch]);\r\n\r\n\r\n  function filterProducts() {\r\n    if (!currentCategory) {\r\n      return state.products;\r\n    }\r\n    return state.products.filter(product => product.category._id === currentCategory);\r\n  }\r\n\r\n  \r\n  return (\r\n    <div className=\"my-2\">\r\n      <h2 className=\"prodh2\">The Product</h2>\r\n      {state.products.length ? (\r\n        <div className=\"flex-row\">\r\n            {filterProducts().map(product => (\r\n                <ProductItem\r\n                  key= {product._id}\r\n                  _id={product._id}\r\n                  image={product.image}\r\n                  name={product.name}\r\n                  price={product.price}\r\n                  quantity={product.quantity}\r\n                />\r\n            ))}\r\n        </div>\r\n      ) : (\r\n        <h3>You haven't added any products yet!</h3>\r\n      )}\r\n      { loading ? \r\n      <img src={spinner} alt=\"loading\" />: null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductList;\r\n// which will be taken up, or imported, into pages ../../pages/Home\r\n","import React, { useEffect } from 'react';\r\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\r\nimport { idbPromise } from '../../utils/helpers';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nfunction CategoryMenu() {\r\n\r\n  const state = useSelector(state => state);\r\n  const dispatch = useDispatch(); \r\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\r\n  const { categories } = state;\r\n\r\n\r\n  useEffect(() => {\r\n    if (categoryData) {\r\n      dispatch({\r\n        type: UPDATE_CATEGORIES,\r\n        categories: categoryData.categories\r\n      });\r\n      categoryData.categories.forEach(category => {\r\n        idbPromise('categories', 'put', category);\r\n      });\r\n    } else if (!loading) {\r\n      idbPromise('categories', 'get').then(categories => {\r\n        dispatch({\r\n          type: UPDATE_CATEGORIES,\r\n          categories: categories\r\n        });\r\n      });\r\n    }\r\n  }, [categoryData, loading, dispatch]);\r\n\r\n\r\n  const handleClick = id => {\r\n    dispatch({\r\n      type: UPDATE_CURRENT_CATEGORY,\r\n      currentCategory: id\r\n    });\r\n  };\r\n  \r\n\r\n  return (\r\n    <div className=\"catDiv\">\r\n      <h2>Cannabis Types:</h2>\r\n      {categories.map(item => (\r\n        <button className=\"catButton\"\r\n          key={item._id}\r\n          onClick={() => {\r\n            handleClick(item._id);\r\n          }}\r\n        >\r\n          {item.name}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CategoryMenu;\r\n// which will be taken up, or imported, into pages ../../pages/Home\r\n","import React from 'react';\r\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\r\nimport { idbPromise } from \"../../utils/helpers\";\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst CartItem = ({ item }) => {\r\n\r\n  const dispatch = useDispatch(); \r\n\r\n  const removeFromCart = item => {\r\n    dispatch({\r\n      type: REMOVE_FROM_CART,\r\n      _id: item._id\r\n    });\r\n    idbPromise('cart', 'delete', { ...item });\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    const value = e.target.value;\r\n      \r\n    if (value === '0') {\r\n      dispatch({\r\n        type: REMOVE_FROM_CART,\r\n        _id: item._id\r\n      });\r\n      idbPromise('cart', 'delete', { ...item });\r\n    } else {\r\n      dispatch({\r\n        type: UPDATE_CART_QUANTITY,\r\n        _id: item._id,\r\n        purchaseQuantity: parseInt(value)\r\n      });\r\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex-row\">\r\n      <div>\r\n        <img\r\n          src={`/images/${item.image}`}\r\n          alt=\"\"\r\n        />\r\n      </div>\r\n      <div>\r\n        <div>{item.name}, ${item.price}</div>\r\n        <div>\r\n          <span>Qty:</span>\r\n          <input\r\n                type=\"number\"\r\n                placeholder=\"1\"\r\n                value={item.purchaseQuantity}\r\n                onChange={onChange}\r\n                />\r\n          <span\r\n                role=\"img\"\r\n                aria-label=\"trash\"\r\n                onClick={() => removeFromCart(item)}\r\n                >\r\n                🗑️\r\n                </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CartItem;","import decode from 'jwt-decode';\r\n\r\nclass AuthService {\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token);\r\n  }\r\n\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken);\r\n\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","import React, { useEffect } from \"react\";\r\nimport CartItem from '../CartItem';\r\nimport Auth from '../../utils/auth';\r\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from \"../../utils/actions\";\r\nimport { idbPromise } from \"../../utils/helpers\";\r\nimport { QUERY_CHECKOUT } from '../../utils/queries';\r\nimport { loadStripe } from '@stripe/stripe-js';\r\nimport { useLazyQuery } from '@apollo/react-hooks';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport './style.css';\r\n\r\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\r\n\r\nconst Cart = () => {\r\n\r\n  const state = useSelector(state => state);\r\n  const dispatch = useDispatch();\r\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\r\n\r\n    \r\n  useEffect(() => {\r\n        \r\n    async function getCart() {          \r\n      const cart = await idbPromise('cart', 'get');          \r\n      dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });        \r\n    };      \r\n        \r\n    if (!state.cart.length) {          \r\n      getCart();        \r\n    }      \r\n  }, [state.cart.length, dispatch]);\r\n\r\n      \r\n  useEffect(() => {\r\n        \r\n    if (data) {          \r\n      stripePromise.then((res) => {            \r\n        res.redirectToCheckout({ sessionId: data.checkout.session });          \r\n      });        \r\n    }      \r\n  }, [data]);\r\n\r\n    \r\n  function toggleCart() {    \r\n    dispatch({ type: TOGGLE_CART });    \r\n  }\r\n\r\n    \r\n  function calculateTotal() {        \r\n    let sum = 0;\r\n        \r\n    state.cart.forEach(item => {          \r\n      sum += item.price * item.purchaseQuantity;        \r\n    });        \r\n    return sum.toFixed(2);      \r\n  }\r\n\r\n      \r\n  function submitCheckout() {        \r\n    const productIds = [];      \r\n        \r\n    state.cart.forEach((item) => {          \r\n      for (let i = 0; i < item.purchaseQuantity; i++) {            \r\n        productIds.push(item._id);          \r\n      }        \r\n    });        \r\n    getCheckout({          \r\n      variables: { products: productIds }        \r\n    });      \r\n  }\r\n\r\n    \r\n  if (!state.cartOpen) {        \r\n    return (\r\n      <div className=\"cart-closed\" onClick={toggleCart}>\r\n        <span\r\n          role=\"img\"\r\n          aria-label=\"trash\">🛒</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"cart cartpop\">\r\n        <div className=\"close\" onClick={toggleCart}>[close]</div>\r\n        <h2>Shopping Cart</h2>\r\n        {state.cart.length ? (\r\n            <div>\r\n            {state.cart.map(item => (\r\n                <CartItem key={item._id} item={item} />\r\n            ))}\r\n            <div className=\"flex-row space-between\">\r\n                <strong>Total: ${calculateTotal()}</strong>\r\n                {\r\n                Auth.loggedIn() ?\r\n                <button onClick={submitCheckout}>\r\n                Checkout\r\n              </button>\r\n                    :\r\n                    <span>(log in to check out)</span>\r\n                }\r\n            </div>\r\n            </div>\r\n        ) : (\r\n            <h3>\r\n            <span role=\"img\" aria-label=\"shocked\">\r\n                😱\r\n            </span>\r\n            You haven't added anything to your cart yet!\r\n            </h3>\r\n        )}\r\n        </div>\r\n  );\r\n};\r\n\r\nexport default Cart;\r\n// which will be taken up, or imported, into pages ../../pages/Home","import React from \"react\";\r\nimport ProductList from \"../components/ProductList\";\r\nimport CategoryMenu from \"../components/CategoryMenu\";\r\nimport Cart from '../components/Cart';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <CategoryMenu />\r\n      <ProductList />\r\n      <Cart />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n// which will be taken up by, or imported into, pages App.js file\r\n","import React from 'react';\r\n\r\nconst ReviewList = ({ reviews }) => {\r\n\r\n  return (\r\n    <div className=\"card2\">\r\n      <div className=\"card-header reviewtitle\">\r\n        <span className=\"text-light\">Reviews</span>\r\n      </div>\r\n      <div className=\"card-body reviewbody\">\r\n        {reviews &&\r\n          reviews.map(review => (\r\n            <p className=\"pill mb-3 reviewtext\" key={review._id}>\r\n              {review.firstName} : {review.reviewBody} \r\n            </p>\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReviewList;\r\n","import gql from 'graphql-tag';\r\n\r\nexport const LOGIN = gql`\r\n  mutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nexport const ADD_ORDER = gql`\r\n  mutation addOrder($products: [ID]!) {\r\n    addOrder(products: $products) {\r\n      purchaseDate\r\n      products {\r\n        _id\r\n      name\r\n      description\r\n      price\r\n      quantity\r\n      category {\r\n        name\r\n      } \r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nexport const ADD_USER = gql`\r\n  mutation addUser($firstName: String!, $lastName: String!, $email: String!, $password: String!) {\r\n    addUser(firstName: $firstName, lastName: $lastName, email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_REVIEW = gql`\r\n  mutation addReview($_id: ID!, $reviewBody: String!) {\r\n    addReview(_id: $_id, reviewBody: $reviewBody) {\r\n      _id\r\n      reviewBody\r\n      createdAt\r\n      firstName\r\n    }\r\n  }\r\n`;","import React, { useState } from 'react';\r\nimport { useMutation, useQuery } from '@apollo/react-hooks';\r\nimport { ADD_REVIEW } from '../../utils/mutations';\r\n\r\nconst ReviewForm = ({ productId }) => {\r\n\r\n  const [reviewBody, setBody] = useState('');\r\n  const [characterCount, setCharacterCount] = useState(0);\r\n  const [addReview, { error }] = useMutation(ADD_REVIEW);\r\n\r\n\r\n  // update state based on form input changes\r\n  const handleChange = event => {\r\n    if (event.target.value.length <= 280) {\r\n      setBody(event.target.value);\r\n      setCharacterCount(event.target.value.length);\r\n    }\r\n  };\r\n\r\n\r\n  function refreshPage(){ \r\n    window.location.reload(); \r\n  }\r\n\r\n  // submit form\r\n  const handleFormSubmit = async event => {\r\n    event.preventDefault();\r\n    console.log(\"review body: \", reviewBody)\r\n    console.log(\"productId: \", productId)\r\n    try {\r\n      await addReview({\r\n        variables: { reviewBody: reviewBody, _id: productId }\r\n      });\r\n      // clear form value\r\n      setBody('');\r\n      setCharacterCount(0);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div>\r\n      <p className={`m-0 ${characterCount === 280 || error ? 'text-error' : ''}`}>\r\n        {error && <span className=\"ml-2\">Something went wrong...</span>}\r\n      </p>\r\n      <form\r\n        className=\"flex-row justify-center justify-space-between-md align-stretch\"\r\n        onSubmit={handleFormSubmit}\r\n      >\r\n        <textarea\r\n          placeholder=\"Leave a review for this product...\"\r\n          value={reviewBody}\r\n          className=\"form-input col-12 col-md-9\"\r\n          onChange={handleChange}\r\n        ></textarea>\r\n\r\n        <button className=\"btn col-12 col-md-3\" type=\"submit\" onClick={refreshPage}>\r\n          Add Review\r\n        </button>\r\n      </form>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReviewForm;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { QUERY_PRODUCTS } from \"../utils/queries\";\r\nimport spinner from '../assets/spinner.gif'\r\n\r\nimport {\r\n  REMOVE_FROM_CART,\r\n  UPDATE_CART_QUANTITY,\r\n  ADD_TO_CART,\r\n  UPDATE_PRODUCTS,\r\n} from '../utils/actions';\r\n\r\nimport Cart from '../components/Cart';\r\nimport ReviewList from '../components/ReviewList';\r\nimport ReviewForm from '../components/ReviewForm';\r\n\r\nimport { idbPromise } from \"../utils/helpers\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nfunction Detail() {\r\n  const state = useSelector(state => state);\r\n  const dispatch = useDispatch(); \r\n  const { id } = useParams();\r\n  const [currentProduct, setCurrentProduct] = useState({})\r\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\r\n  const { products, cart } = state;\r\n\r\n  \r\n  useEffect(() => {\r\n    // already in global store\r\n    if (products.length) {\r\n      setCurrentProduct(products.find(product => product._id === id));\r\n    } \r\n    // retrieved from server\r\n    else if (data) {\r\n      dispatch({\r\n        type: UPDATE_PRODUCTS,\r\n        products: data.products\r\n      });\r\n  \r\n      data.products.forEach((product) => {\r\n        idbPromise('products', 'put', product);\r\n      });\r\n    }\r\n    // get cache from idb\r\n    else if (!loading) {\r\n      idbPromise('products', 'get').then((indexedProducts) => {\r\n        dispatch({\r\n          type: UPDATE_PRODUCTS,\r\n          products: indexedProducts\r\n        });\r\n      });\r\n    }\r\n  }, [products, data, loading, dispatch, id]);\r\n  \r\n\r\n  const addToCart = () => {\r\n    const itemInCart = cart.find((cartItem) => cartItem._id === id)\r\n  \r\n    if (itemInCart) {\r\n      dispatch({\r\n        type: UPDATE_CART_QUANTITY,\r\n        _id: id,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\r\n      });\r\n      // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\r\n      idbPromise('cart', 'put', {\r\n        ...itemInCart,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: ADD_TO_CART,\r\n        product: { ...currentProduct, purchaseQuantity: 1 }\r\n      });\r\n      // if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\r\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\r\n    }\r\n  };\r\n\r\n  const removeFromCart = () => {\r\n    dispatch({\r\n      type: REMOVE_FROM_CART,\r\n      _id: currentProduct._id\r\n    });\r\n  \r\n    // upon removal from cart, delete the item from IndexedDB using the `currentProduct._id` to locate what to remove\r\n    idbPromise('cart', 'delete', { ...currentProduct });\r\n  };\r\n\r\n  return (\r\n    <>\r\n    {console.log(\"skdaljhksadhfasdf\", currentProduct)}\r\n      {currentProduct ? (\r\n        <div className=\"container my-1\">\r\n          <Link to=\"/\">\r\n            ← Back to Products\r\n          </Link>\r\n\r\n          <h2>{currentProduct.name}</h2>\r\n\r\n          <p>\r\n            <strong>Price:</strong>\r\n            ${currentProduct.price}\r\n            {\" \"}\r\n            <button onClick={addToCart}>Add to Stash</button>\r\n            <button \r\n                disabled={!cart.find(p => p._id === currentProduct._id)} \r\n                onClick={removeFromCart}\r\n              >\r\n                Remove from Stash\r\n              </button>\r\n          </p>\r\n\r\n          <img className=\"singleprodimg\"\r\n            src={`/images/${currentProduct.image}`}\r\n            alt={currentProduct.name}\r\n          />\r\n          <ReviewForm productId = {currentProduct._id} />\r\n          <ReviewList reviews = {currentProduct.reviews}/>\r\n          <h4>Product Description</h4>\r\n          <p>\r\n            {currentProduct.description}\r\n          </p>\r\n        </div>\r\n      ) : null}\r\n      {\r\n        loading ? <img src={spinner} alt=\"loading\" /> : null\r\n      }\r\n      <Cart />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Detail;\r\n","import React from \"react\";\r\n\r\nfunction Jumbotron({ children }) {\r\n  return (\r\n    <div\r\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Jumbotron;\r\n","import React from \"react\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\n\r\nconst NoMatch = () => {\r\n  \r\n  return (\r\n    <div>\r\n      <Jumbotron>\r\n        <h1>404 Page Not Found</h1>\r\n        <h1>\r\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\r\n            🙄\r\n          </span>\r\n        </h1>\r\n      </Jumbotron>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoMatch;\r\n","import React, { useState } from \"react\";\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { Link } from \"react-router-dom\";\r\nimport { LOGIN } from \"../utils/mutations\"\r\nimport Auth from \"../utils/auth\";\r\n\r\nfunction Login(props) {\r\n\r\n  const [formState, setFormState] = useState({ email: '', password: '' })\r\n  const [login, { error }] = useMutation(LOGIN);\r\n\r\n\r\n  const handleFormSubmit = async event => {\r\n    event.preventDefault();\r\n    try {\r\n      const mutationResponse = await login({ variables: { email: formState.email, password: formState.password } })\r\n      const token = mutationResponse.data.login.token;\r\n      Auth.login(token);\r\n    } catch (e) {\r\n      console.log(e)\r\n    }\r\n  };\r\n\r\n  \r\n  const handleChange = event => {\r\n    const { name, value } = event.target;\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container my-1\">\r\n      <Link to=\"/signup\">\r\n        ← Go to Signup\r\n      </Link>\r\n\r\n      <h2>Login</h2>\r\n      <form onSubmit={handleFormSubmit}>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"email\">Email address:</label>\r\n          <input\r\n            placeholder=\"youremail@test.com\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            id=\"email\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"pwd\">Password:</label>\r\n          <input\r\n            placeholder=\"******\"\r\n            name=\"password\"\r\n            type=\"password\"\r\n            id=\"pwd\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        {\r\n          error ? <div>\r\n            <p className=\"error-text\" >The provided credentials are incorrect</p>\r\n          </div> : null\r\n        }\r\n        <div className=\"flex-row flex-end\">\r\n          <button type=\"submit\">\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Login;\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport Auth from \"../utils/auth\";\r\nimport { ADD_USER } from \"../utils/mutations\";\r\n\r\nfunction Signup(props) {\r\n\r\n  const [formState, setFormState] = useState({ email: '', password: '' });\r\n  const [addUser] = useMutation(ADD_USER);\r\n\r\n\r\n  const handleFormSubmit = async event => {\r\n    event.preventDefault();\r\n    const mutationResponse = await addUser({\r\n      variables: {\r\n        email: formState.email, password: formState.password,\r\n        firstName: formState.firstName, lastName: formState.lastName\r\n      }\r\n    });\r\n    const token = mutationResponse.data.addUser.token;\r\n    Auth.login(token);\r\n  };\r\n\r\n  \r\n  const handleChange = event => {\r\n    const { name, value } = event.target;\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container my-1\">\r\n      <Link to=\"/login\">\r\n        ← Go to Login\r\n      </Link>\r\n\r\n      <h2>Signup</h2>\r\n      <form onSubmit={handleFormSubmit}>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"firstName\">First Name:</label>\r\n          <input\r\n            placeholder=\"First\"\r\n            name=\"firstName\"\r\n            type=\"firstName\"\r\n            id=\"firstName\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"lastName\">Last Name:</label>\r\n          <input\r\n            placeholder=\"Last\"\r\n            name=\"lastName\"\r\n            type=\"lastName\"\r\n            id=\"lastName\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"email\">Email:</label>\r\n          <input\r\n            placeholder=\"youremail@test.com\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            id=\"email\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"pwd\">Password:</label>\r\n          <input\r\n            placeholder=\"******\"\r\n            name=\"password\"\r\n            type=\"password\"\r\n            id=\"pwd\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row flex-end\">\r\n          <button type=\"submit\">\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default Signup;\r\n","import React from \"react\";\r\nimport Auth from \"../../utils/auth\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Nav() {\r\n\r\n  function showNavigation() {\r\n    if (Auth.loggedIn()) {\r\n      return (\r\n        <ul>\r\n          <li className=\"mx-1\">\r\n            <Link to=\"/orderHistory\">\r\n              Order History\r\n            </Link>\r\n          </li>\r\n          <li className=\"mx-1\">\r\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\r\n            <a href=\"/\" onClick={() => Auth.logout()}>\r\n              Logout\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      );\r\n    } else {\r\n      return (\r\n        <ul>\r\n          <li className=\"mx-1\">\r\n            <Link to=\"/signup\">\r\n              Signup\r\n            </Link>\r\n          </li>\r\n          <li className=\"mx-1\">\r\n            <Link to=\"/login\">\r\n              Login\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <header>\r\n        <h1>\r\n          <Link to=\"/\">\r\n            Private Reserve\r\n          </Link>\r\n        </h1>\r\n\r\n        <nav className=\"navstyle\">\r\n          {showNavigation()}\r\n        </nav>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React, { useEffect } from \"react\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { ADD_ORDER } from \"../utils/mutations.js\";\r\nimport { idbPromise } from \"../utils/helpers\";\r\n\r\nfunction Success() {\r\n  const [addOrder] = useMutation(ADD_ORDER);\r\n\r\n  useEffect(() => {\r\n    async function saveOrder() {\r\n      const cart = await idbPromise('cart', 'get');\r\n      const products = cart.map(item => item._id);\r\n\r\n      if (products.length) {\r\n        const { data } = await addOrder({ variables: { products } });\r\n        const productData = data.addOrder.products;\r\n          \r\n        productData.forEach((item) => {\r\n          idbPromise('cart', 'delete', item);\r\n        });\r\n      }\r\n    }\r\n    saveOrder();\r\n  }, [addOrder]);\r\n\r\n  setTimeout(function(){ window.location.assign(\"/\")}, 3000);\r\n\r\n  return (\r\n    <div>\r\n      <Jumbotron>\r\n        <h1>Success!</h1>\r\n        <h2>\r\n          Thank you for your purchase!\r\n        </h2>\r\n        <h2>\r\n          You will now be redirected to the homepage\r\n        </h2>\r\n      </Jumbotron>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Success;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { QUERY_USER } from \"../utils/queries\";\r\n\r\nfunction OrderHistory() {\r\n\r\n  const { data } = useQuery(QUERY_USER);\r\n\r\n  let user;\r\n\r\n  if (data) {\r\n    user = data.user;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container my-1\">\r\n        <Link to=\"/\">\r\n          ← Back to Products\r\n          </Link>\r\n\r\n        {user ? (\r\n          <>\r\n            <h2>Order History for {user.firstName} {user.lastName}</h2>\r\n            {user.orders.map((order) => (\r\n              <div key={order._id} className=\"my-2\">\r\n                <h3>{new Date(parseInt(order.purchaseDate)).toLocaleDateString()}</h3>\r\n                <div className=\"flex-row\">\r\n                  {order.products.map(({ _id, image, name, price }, index) => (\r\n                    <div key={index} className=\"card px-1 py-1\">\r\n                      <Link to={`/products/${_id}`}>\r\n                        <img\r\n                          alt={name}\r\n                          src={`/images/${image}`}\r\n                        />\r\n                        <p>{name}</p>\r\n                      </Link>\r\n                      <div>\r\n                        <span>${price}</span>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </>\r\n        ) : null}\r\n      </div>\r\n    </>\r\n  )\r\n\r\n};\r\n\r\nexport default OrderHistory;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport { ApolloProvider } from '@apollo/react-hooks';\r\nimport ApolloClient from 'apollo-boost';\r\nimport { Provider } from 'react-redux';\r\nimport store from './utils/store';\r\nimport Home from \"./pages/Home\";\r\nimport Detail from \"./pages/Detail\";\r\nimport NoMatch from \"./pages/NoMatch\";\r\nimport Login from \"./pages/Login\";\r\nimport Signup from \"./pages/Signup\";\r\nimport Nav from \"./components/Nav\";\r\nimport Success from \"./pages/Success\";\r\nimport OrderHistory from \"./pages/OrderHistory\";\r\n\r\nconst client = new ApolloClient({\r\n  request: (operation) => {\r\n    const token = localStorage.getItem('id_token')\r\n    operation.setContext({\r\n      headers: {\r\n        authorization: token ? `Bearer ${token}` : ''\r\n      }\r\n    })\r\n  },\r\n  uri: '/graphql',\r\n})\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <div>\r\n          <Provider store={store}>\r\n            <Nav />\r\n            <Switch>\r\n              <Route exact path=\"/\" component={Home} />\r\n              <Route exact path=\"/login\" component={Login} />\r\n              <Route exact path=\"/signup\" component={Signup} />\r\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\r\n              <Route exact path=\"/products/:id\" component={Detail} />\r\n              <Route exact path=\"/success\" component={Success} />\r\n              <Route component={NoMatch} />\r\n            </Switch>\r\n          </Provider>\r\n        </div>\r\n      </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport function register(config) {\r\n  if (\r\n    process.env.NODE_ENV === 'production' &&\r\n    'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}